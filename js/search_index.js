var search_data = {"index":{"searchIndex":["action","actionoutput","controller","copyttlinwardsaction","copyttloutwardsaction","dataplanefirewall","decmplsttlaction","decnwttlaction","dropaction","firewall","floodaction","floodallaction","flowentry","groupaction","hwpathaction","instruction","loopbackaction","match","net","netconfnode","netconfresponse","netconfresponsestatus","node","ofswitch","openflownode","outputaction","popmplsheaderaction","poppbbheaderaction","popvlanheaderaction","pushmplsheaderaction","pushpbbheaderaction","pushvlanheaderaction","rule","rules","setdldstaction","setdlsrcaction","setfieldaction","setmplsttlaction","setnwdstaction","setnwsrcaction","setnwttlaction","setqueueaction","settpdstaction","settpsrcaction","setvlancfiaction","setvlanidaction","setvlanpcpaction","stripvlanaction","swpathaction","vrouter5600","add_apply_action()","add_instruction()","add_match()","add_modify_flow()","add_netconf_node()","add_rule()","check_node_config_status()","check_node_conn_status()","create_firewall_instance()","delete_dataplane_interface_firewall()","delete_firewall_instance()","delete_flow()","delete_netconf_node()","get_all_modules_operational_state()","get_all_nodes_conn_status()","get_all_nodes_in_config()","get_cfg()","get_configured_flow()","get_configured_flows()","get_configured_flows_ovs_syntax()","get_dataplane_interface_cfg()","get_dataplane_interfaces_cfg()","get_dataplane_interfaces_list()","get_ext_mount_config_uri()","get_features_info()","get_firewall_instance_cfg()","get_firewalls_cfg()","get_interfaces_cfg()","get_interfaces_list()","get_loopback_interface_cfg()","get_loopback_interfaces_cfg()","get_loopback_interfaces_list()","get_module_operational_state()","get_netconf_nodes_conn_status()","get_netconf_nodes_in_config()","get_netconf_operations()","get_node_config_uri()","get_node_info()","get_node_operational_uri()","get_nodes_operational_list()","get_openflow_nodes_operational_list()","get_operational_flows()","get_operational_flows_ovs_syntax()","get_port_detail_info()","get_ports_brief_info()","get_ports_list()","get_schema()","get_schema()","get_schemas()","get_schemas()","get_service_provider_info()","get_service_providers_info()","get_sessions_info()","get_streams_info()","get_switch_info()","get_uri()","message()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","set_dataplane_interface_firewall()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_s()","update()","update_from_object()","gemfile","gemfile.lock","license","contributors","dodoc","howtoreleasenewversion","howtoupdatedocs","publishdoc","rubybvc.gemspec"],"longSearchIndex":["action","actionoutput","controller","copyttlinwardsaction","copyttloutwardsaction","dataplanefirewall","decmplsttlaction","decnwttlaction","dropaction","firewall","floodaction","floodallaction","flowentry","groupaction","hwpathaction","instruction","loopbackaction","match","net","netconfnode","netconfresponse","netconfresponsestatus","node","ofswitch","openflownode","outputaction","popmplsheaderaction","poppbbheaderaction","popvlanheaderaction","pushmplsheaderaction","pushpbbheaderaction","pushvlanheaderaction","rule","rules","setdldstaction","setdlsrcaction","setfieldaction","setmplsttlaction","setnwdstaction","setnwsrcaction","setnwttlaction","setqueueaction","settpdstaction","settpsrcaction","setvlancfiaction","setvlanidaction","setvlanpcpaction","stripvlanaction","swpathaction","vrouter5600","instruction#add_apply_action()","flowentry#add_instruction()","flowentry#add_match()","ofswitch#add_modify_flow()","controller#add_netconf_node()","rules#add_rule()","controller#check_node_config_status()","controller#check_node_conn_status()","vrouter5600#create_firewall_instance()","vrouter5600#delete_dataplane_interface_firewall()","vrouter5600#delete_firewall_instance()","ofswitch#delete_flow()","controller#delete_netconf_node()","controller#get_all_modules_operational_state()","controller#get_all_nodes_conn_status()","controller#get_all_nodes_in_config()","vrouter5600#get_cfg()","ofswitch#get_configured_flow()","ofswitch#get_configured_flows()","ofswitch#get_configured_flows_ovs_syntax()","vrouter5600#get_dataplane_interface_cfg()","vrouter5600#get_dataplane_interfaces_cfg()","vrouter5600#get_dataplane_interfaces_list()","controller#get_ext_mount_config_uri()","ofswitch#get_features_info()","vrouter5600#get_firewall_instance_cfg()","vrouter5600#get_firewalls_cfg()","vrouter5600#get_interfaces_cfg()","vrouter5600#get_interfaces_list()","vrouter5600#get_loopback_interface_cfg()","vrouter5600#get_loopback_interfaces_cfg()","vrouter5600#get_loopback_interfaces_list()","controller#get_module_operational_state()","controller#get_netconf_nodes_conn_status()","controller#get_netconf_nodes_in_config()","controller#get_netconf_operations()","controller#get_node_config_uri()","controller#get_node_info()","controller#get_node_operational_uri()","controller#get_nodes_operational_list()","controller#get_openflow_nodes_operational_list()","ofswitch#get_operational_flows()","ofswitch#get_operational_flows_ovs_syntax()","ofswitch#get_port_detail_info()","ofswitch#get_ports_brief_info()","ofswitch#get_ports_list()","controller#get_schema()","vrouter5600#get_schema()","controller#get_schemas()","vrouter5600#get_schemas()","controller#get_service_provider_info()","controller#get_service_providers_info()","controller#get_sessions_info()","controller#get_streams_info()","ofswitch#get_switch_info()","dataplanefirewall#get_uri()","netconfresponse#message()","action::new()","actionoutput::new()","controller::new()","copyttlinwardsaction::new()","copyttloutwardsaction::new()","dataplanefirewall::new()","decmplsttlaction::new()","decnwttlaction::new()","firewall::new()","floodaction::new()","floodallaction::new()","flowentry::new()","groupaction::new()","hwpathaction::new()","instruction::new()","loopbackaction::new()","match::new()","netconfnode::new()","node::new()","ofswitch::new()","outputaction::new()","popmplsheaderaction::new()","poppbbheaderaction::new()","popvlanheaderaction::new()","pushmplsheaderaction::new()","pushpbbheaderaction::new()","pushvlanheaderaction::new()","rule::new()","rules::new()","setdldstaction::new()","setdlsrcaction::new()","setfieldaction::new()","setmplsttlaction::new()","setnwdstaction::new()","setnwsrcaction::new()","setnwttlaction::new()","setqueueaction::new()","settpdstaction::new()","settpsrcaction::new()","setvlancfiaction::new()","setvlanidaction::new()","setvlanpcpaction::new()","swpathaction::new()","vrouter5600#set_dataplane_interface_firewall()","copyttlinwardsaction#to_hash()","copyttloutwardsaction#to_hash()","dataplanefirewall#to_hash()","decmplsttlaction#to_hash()","decnwttlaction#to_hash()","dropaction#to_hash()","floodaction#to_hash()","floodallaction#to_hash()","hwpathaction#to_hash()","actionoutput#to_s()","actionoutput#update()","actionoutput#update_from_object()","","","","","","","","",""],"info":[["Action","","Action.html","","<p>Base class for all OpenFlow actions\n"],["ActionOutput","","ActionOutput.html","","<p>OpenFlow &#39;Output&#39; action type\n"],["Controller","","Controller.html","","<p>Class that represents a Controller device.\n"],["CopyTTLInwardsAction","","CopyTTLInwardsAction.html","","<p>Class defining the action that copies Time To Live from outermost header to\nnext-to-outermost header. …\n"],["CopyTTLOutwardsAction","","CopyTTLOutwardsAction.html","","<p>Class defining openflow action to copy Time To Live from next-to-outermost\nheader to outermost header. …\n"],["DataplaneFirewall","","DataplaneFirewall.html","","<p>Copyright © 2015,  BROCADE COMMUNICATIONS SYSTEMS, INC\n<p>All rights reserved.\n<p>Redistribution and use in …\n"],["DecMplsTTLAction","","DecMplsTTLAction.html","","<p>Class representing OpenFlow action to decrement the MPLS Time To Live\nvalue.\n"],["DecNwTTLAction","","DecNwTTLAction.html","","<p>Class to define OpenFlow action that decrements Time To Live\n"],["DropAction","","DropAction.html","","<p>Class defining an OpenFlow action to drop the packet.\n"],["Firewall","","Firewall.html","","<p>A class that defines a Firewall.\n"],["FloodAction","","FloodAction.html","","<p>Class defining an OpenFlow action to flood packet\n"],["FloodAllAction","","FloodAllAction.html","","<p>Class to define a Flood-all action.  Floods to all bu the ingress port.\n"],["FlowEntry","","FlowEntry.html","","<p>Class for creating and interacting with OpenFlow flows\n"],["GroupAction","","GroupAction.html","","<p>Class to define an action to forward to a group\n"],["HwPathAction","","HwPathAction.html","","<p>Copyright © 2015,  BROCADE COMMUNICATIONS SYSTEMS, INC\n<p>All rights reserved.\n<p>Redistribution and use in …\n"],["Instruction","","Instruction.html","","<p>Class representing OpenFlow flow instruction\n"],["LoopbackAction","","LoopbackAction.html","","<p>Class to represent OpenFlow action for forwarding to the loopback interface\nof device\n"],["Match","","Match.html","","<p>Class that represents OpenFlow flow matching attributes\n"],["Net","","Net.html","",""],["NetconfNode","","NetconfNode.html","","<p>Class that represents a NetconfNode\n"],["NetconfResponse","","NetconfResponse.html","","<p>Class defining response to most requests made in rubybvc.\n"],["NetconfResponseStatus","","NetconfResponseStatus.html","","<p>Class defining the numeric status that may be returned from making a\nrequest to rubybvc\n"],["Node","","Node.html","","<p>Class that represents a Controller device.\n"],["OFSwitch","","OFSwitch.html","","<p>Class that represents an instance of &#39;OpenFlow Switch&#39; (OpenFlow\ncapable device).\n"],["OpenflowNode","","OpenflowNode.html","","<p>Copyright © 2015,  BROCADE COMMUNICATIONS SYSTEMS, INC\n<p>All rights reserved.\n<p>Redistribution and use in …\n"],["OutputAction","","OutputAction.html","","<p>Class to define an OpenFlow output action\n"],["PopMplsHeaderAction","","PopMplsHeaderAction.html","","<p>Class that defines an OpenFlow Pop MPLS action ( remove the tunnel\nencapsulation )\n"],["PopPBBHeaderAction","","PopPBBHeaderAction.html","","<p>Class to represent OpenFlow action to Pop Provider Backbone Bridge (remove\nencapsulation)\n"],["PopVlanHeaderAction","","PopVlanHeaderAction.html","","<p>Class that is used to define an OpenFlow POP VLAN header action.  Remove\nthe VLAN encapsulation (Q-in-Q). …\n"],["PushMplsHeaderAction","","PushMplsHeaderAction.html","","<p>Class used to define an OpenFlow action to add MPLS header to packet.\n"],["PushPBBHeaderAction","","PushPBBHeaderAction.html","","<p>Class to define an OpenFlow action to add a Provider Backbone Bridge\nencapsulation\n"],["PushVlanHeaderAction","","PushVlanHeaderAction.html","","<p>Class to define an OpenFlow action to add a VLAN encapsulation.\n"],["Rule","","Rule.html","","<p>The class that defines a Firewall Rule.\n"],["Rules","","Rules.html","","<p>The class that defines firewall Rules.\n"],["SetDlDstAction","","SetDlDstAction.html","","<p>Class to define an OpenFlow action for setting the ethernet (data layer)\ndestination\n"],["SetDlSrcAction","","SetDlSrcAction.html","","<p>Class to define an OpenFlow action to set the Ethernet (data layer) source\nMAC address\n"],["SetFieldAction","","SetFieldAction.html","","<p>Class to define OpenFlow action to set a field.\n"],["SetMplsTTLAction","","SetMplsTTLAction.html","","<p>Class to define an OpenFlow action to set the MPLS Time To Live (TTL)\n"],["SetNwDstAction","","SetNwDstAction.html","","<p>Class to define OpenFlow action to set the destination IP (network layer)\naddress\n"],["SetNwSrcAction","","SetNwSrcAction.html","","<p>Class used to define OpenFlow action for setting the Source IP address\n(network layer)\n"],["SetNwTTLAction","","SetNwTTLAction.html","","<p>Class used to define OpenFlow action to set IP header Time To Live (network\nlayer)\n"],["SetQueueAction","","SetQueueAction.html","","<p>Class to define OpenFlow action to set the queue for the packet\n"],["SetTpDstAction","","SetTpDstAction.html","","<p>Class used to define OpenFlow action to set the TCP Destination port\n"],["SetTpSrcAction","","SetTpSrcAction.html","","<p>Class used to define OpenFlow action to set TCP Source Port\n"],["SetVlanCfiAction","","SetVlanCfiAction.html","","<p>Class used to define OpenFlow action to set the CFI field of VLAN header\n"],["SetVlanIdAction","","SetVlanIdAction.html","","<p>Class to define OpenFlow action that will set the VLAN identifier in VLAN\nheader\n"],["SetVlanPCPAction","","SetVlanPCPAction.html","","<p>Class used to define OpenFlow action to set the PCP field in VLAN header\n"],["StripVlanAction","","StripVlanAction.html","","<p>Class used to define OpenFlow action to strip the VLAN header.\n"],["SwPathAction","","SwPathAction.html","","<p>Copyright © 2015,  BROCADE COMMUNICATIONS SYSTEMS, INC\n<p>All rights reserved.\n<p>Redistribution and use in …\n"],["VRouter5600","","VRouter5600.html","","<p>Class that represents a VRouter 5600 device.\n"],["add_apply_action","Instruction","Instruction.html#method-i-add_apply_action","(action)","<p>Add action to an Instruction.\n<p><em>Parameters</em>\n<p><p>action &mdash; Action : What action to take\n"],["add_instruction","FlowEntry","FlowEntry.html#method-i-add_instruction","(instruction)","<p>Add an Instruction to the flow entry.\n<p><em>Parameters</em>\n<p><p>instruction &mdash; Instruction : Instruction to add to the flow …\n"],["add_match","FlowEntry","FlowEntry.html#method-i-add_match","(match)","<p>Add a match rule to the flow entry.\n<p><em>Parameters</em>\n<p><p>match &mdash; Match : Match to add to the flow entry.\n"],["add_modify_flow","OFSwitch","OFSwitch.html#method-i-add_modify_flow","(flow)","<p>Add a new flow or modify an existing one.\n<p><em>Parameters</em>\n<p><p>flow &mdash; FlowEntry : the flow definition\n"],["add_netconf_node","Controller","Controller.html#method-i-add_netconf_node","(node)","<p>Connect a netconf device to the controller (for example connect vrouter to\ncontroller via NetConf)\n<p><em>Parameters</em> …\n"],["add_rule","Rules","Rules.html#method-i-add_rule","(rule)","<p>Add a rule to this firewall.\n<p><em>Parameters</em>\n<p><p>rule &mdash; Rule : A Firewall Rule to add to this Firewall.\n"],["check_node_config_status","Controller","Controller.html#method-i-check_node_config_status","(node_name)","<p>Return the configuration status of the node.\n<p><em>Parameters</em>\n<p><p>node_name &mdash; String : name of the node from the  …\n"],["check_node_conn_status","Controller","Controller.html#method-i-check_node_conn_status","(node_name)","<p>Return the connection status of the node to the controller.\n<p><em>Parameters</em>\n<p><p>node_name &mdash; String : name of the …\n"],["create_firewall_instance","VRouter5600","VRouter5600.html#method-i-create_firewall_instance","(firewall)","<p>Create a firewall on the VRouter5600.\n<p><em>Parameters</em>\n<p><p>firewall &mdash; Firewall : firewall object describing the firewall …\n"],["delete_dataplane_interface_firewall","VRouter5600","VRouter5600.html#method-i-delete_dataplane_interface_firewall","(interface_name)","<p>Delete both inbound and outbound firewalls for a dataplane interface on the\nVRouter 5600.\n<p><em>Parameters</em>  …\n"],["delete_firewall_instance","VRouter5600","VRouter5600.html#method-i-delete_firewall_instance","(firewall_or_name)","<p>Delete a firewall from the VRouter5600.\n<p><em>Parameters</em>\n<p><p>firewall_or_name &mdash; Firewall or String : A Firewall object …\n"],["delete_flow","OFSwitch","OFSwitch.html#method-i-delete_flow","(table_id: nil, flow_id: nil)","<p>Remove a flow.\n<p><em>Parameters</em>\n<p><p>table_id &mdash; String : the identifier for the OpenFlow table from which to remove …\n"],["delete_netconf_node","Controller","Controller.html#method-i-delete_netconf_node","(node)","<p>Disconnect a netconf device from the controller.\n<p><em>Parameters</em>\n<p><p>node &mdash; NetconfNode : node to disconnect from …\n"],["get_all_modules_operational_state","Controller","Controller.html#method-i-get_all_modules_operational_state","()","<p>Return a list of modules and their operational state.\n<p><em>Return</em> <em>Value</em>\n<p>NetconfResponse :  Status ( NetconfResponseStatus …\n"],["get_all_nodes_conn_status","Controller","Controller.html#method-i-get_all_nodes_conn_status","()","<p>Return a list of nodes and the status of their connection to the\ncontroller.\n<p><em>Return</em> <em>Value</em>\n<p>NetconfResponse …\n"],["get_all_nodes_in_config","Controller","Controller.html#method-i-get_all_nodes_in_config","()","<p>Return a list of nodes in the controller&#39;s config data store\n<p><em>Return</em> <em>Value</em>\n<p>NetconfResponse :  Status …\n"],["get_cfg","VRouter5600","VRouter5600.html#method-i-get_cfg","()","<p>Return configuration of the VRouter5600.\n<p><em>Return</em> <em>Value</em>\n<p>NetconfResponse :  Status ( NetconfResponseStatus …\n"],["get_configured_flow","OFSwitch","OFSwitch.html#method-i-get_configured_flow","(table_id: nil, flow_id: nil)","<p>Return details of a specific flow.\n<p><em>Parameters</em>\n<p><p>table_id &mdash; String : the identifier for the OpenFlow table …\n"],["get_configured_flows","OFSwitch","OFSwitch.html#method-i-get_configured_flows","(table_id: nil)","<p>Return a list of flows in the controller&#39;s configuration data store for\nthe OpenFlow switch.  These …\n"],["get_configured_flows_ovs_syntax","OFSwitch","OFSwitch.html#method-i-get_configured_flows_ovs_syntax","(table_id: nil, sort: false)","<p>Return a list of flows in the controller&#39;s configured data store for\nthe OpenFlow switch.\n<p>These are …\n"],["get_dataplane_interface_cfg","VRouter5600","VRouter5600.html#method-i-get_dataplane_interface_cfg","(interface_name)","<p>Return the configuration for a dataplane interface on the VRouter5600\n<p><em>Parameters</em>\n<p><p>interface_name &mdash; String …\n"],["get_dataplane_interfaces_cfg","VRouter5600","VRouter5600.html#method-i-get_dataplane_interfaces_cfg","()","<p>Return the configuration for the dataplane interfaces on the VRouter5600.\n<p><em>Return</em> <em>Value</em>\n<p>NetconfResponse …\n"],["get_dataplane_interfaces_list","VRouter5600","VRouter5600.html#method-i-get_dataplane_interfaces_list","()","<p>Return a list of interfaces on the VRouter5600\n<p><em>Return</em> <em>Value</em>\n<p>NetconfResponse :  Status ( NetconfResponseStatus …\n"],["get_ext_mount_config_uri","Controller","Controller.html#method-i-get_ext_mount_config_uri","(node)","<p>Return the netconf mountpoint url to the configured node.\n<p><em>Parameters</em>\n<p><p>node &mdash; NetconfNode : node for which …\n"],["get_features_info","OFSwitch","OFSwitch.html#method-i-get_features_info","()","<p>Return a list of OpenFlow features supported by the OpenFlow switch.\n<p><em>Return</em> <em>Value</em>\n<p>NetconfResponse :  Status …\n"],["get_firewall_instance_cfg","VRouter5600","VRouter5600.html#method-i-get_firewall_instance_cfg","(firewall_or_name)","<p>Return configuration for a specific firewall on the VRouter5600.\n<p><em>Parameters</em>\n<p><p>firewall_or_name &mdash; Firewall …\n"],["get_firewalls_cfg","VRouter5600","VRouter5600.html#method-i-get_firewalls_cfg","()","<p>Return firewall configuration of the VRouter5600.\n<p><em>Return</em> <em>Value</em>\n<p>NetconfResponse :  Status ( NetconfResponseStatus …\n"],["get_interfaces_cfg","VRouter5600","VRouter5600.html#method-i-get_interfaces_cfg","()","<p>Return the configuration for the interfaces on the VRouter 5600.\n<p><em>Return</em> <em>Value</em>\n<p>NetconfResponse :  Status …\n"],["get_interfaces_list","VRouter5600","VRouter5600.html#method-i-get_interfaces_list","()","<p>Get the list of interfaces on the VRouter 5600.\n<p><em>Return</em> <em>Value</em>\n<p>NetconfResponse :  Status ( NetconfResponseStatus …\n"],["get_loopback_interface_cfg","VRouter5600","VRouter5600.html#method-i-get_loopback_interface_cfg","(interface_name)","<p>Return the configuration for a single loopback interface on the VRouter\n5600.\n<p><em>Parameters</em>\n<p><p>interface_name … &mdash; "],["get_loopback_interfaces_cfg","VRouter5600","VRouter5600.html#method-i-get_loopback_interfaces_cfg","()","<p>Return the configuration for the loopback interfaces on the VRouter 5600.\n<p><em>Return</em> <em>Value</em>\n<p>NetconfResponse …\n"],["get_loopback_interfaces_list","VRouter5600","VRouter5600.html#method-i-get_loopback_interfaces_list","()","<p>Return a list of loopback interfaces on the VRouter5600\n<p><em>Return</em> <em>Value</em>\n<p>NetconfResponse :  Status ( NetconfResponseStatus …\n"],["get_module_operational_state","Controller","Controller.html#method-i-get_module_operational_state","(type: nil, name: nil)","<p>Return operational state for specified module.\n<p><em>Parameters</em>\n<p><p>type &mdash; String :  module type\n"],["get_netconf_nodes_conn_status","Controller","Controller.html#method-i-get_netconf_nodes_conn_status","()","<p>Return a list of NETCONF nodes in the operational data store of controller\nand the status of their connection …\n"],["get_netconf_nodes_in_config","Controller","Controller.html#method-i-get_netconf_nodes_in_config","()","<p>Return a list of NETCONF nodes in the controller&#39;s configuration data\nstore\n<p><em>Return</em> <em>Value</em>\n<p>NetconfResponse …\n"],["get_netconf_operations","Controller","Controller.html#method-i-get_netconf_operations","(node_name)","<p>Return a list of operations supported by the indicated node.\n<p><em>Parameters</em>\n<p><p>node_name &mdash; String : name of the …\n"],["get_node_config_uri","Controller","Controller.html#method-i-get_node_config_uri","(node)","<p>Return the url to the configured node.\n<p><em>Parameters</em>\n<p><p>node &mdash; NetconfNode : node for which to return the url. …\n"],["get_node_info","Controller","Controller.html#method-i-get_node_info","(node_name)","<p>Return information about a node in the operational data store.\n<p><em>Parameters</em>\n<p><p>node_name &mdash; String : name of the …\n"],["get_node_operational_uri","Controller","Controller.html#method-i-get_node_operational_uri","(node)","<p>Return the url to the operational node.\n<p><em>Parameters</em>\n<p><p>node &mdash; NetconfNode : node for which to return the url. …\n"],["get_nodes_operational_list","Controller","Controller.html#method-i-get_nodes_operational_list","()","<p>Return a list of nodes in the controllers operational data store.\n<p><em>Return</em> <em>Value</em>\n<p>NetconfResponse :  Status …\n"],["get_openflow_nodes_operational_list","Controller","Controller.html#method-i-get_openflow_nodes_operational_list","()","<p>Return a list of nodes that support OpenFlow in the Controller&#39;s\noperational data store.\n<p><em>Return</em> <em>Value</em> …\n"],["get_operational_flows","OFSwitch","OFSwitch.html#method-i-get_operational_flows","(table_id: nil)","<p>Return a list of flows in the controller&#39;s operational data store for\nthe OpenFlow switch.  These …\n"],["get_operational_flows_ovs_syntax","OFSwitch","OFSwitch.html#method-i-get_operational_flows_ovs_syntax","(table_id: nil, sort: false)","<p>Return a list of flows in the controller&#39;s operational data store for\nthe OpenFlow switch.  These …\n"],["get_port_detail_info","OFSwitch","OFSwitch.html#method-i-get_port_detail_info","(port)","<p>Return detailed information about a specific port.\n<p><em>Parameters</em>\n<p><p>port &mdash; Integer : number for the port from …\n"],["get_ports_brief_info","OFSwitch","OFSwitch.html#method-i-get_ports_brief_info","()","<p>Return a brief set of information about each port on the OpenFlow switch.\n<p><em>Return</em> <em>Value</em>\n<p>NetconfResponse …\n"],["get_ports_list","OFSwitch","OFSwitch.html#method-i-get_ports_list","()","<p>Return a list of ports for the OpenFlow switch.\n<p><em>Return</em> <em>Value</em>\n<p>NetconfResponse :  Status ( NetconfResponseStatus …\n"],["get_schema","Controller","Controller.html#method-i-get_schema","(node_name, id: nil, version: nil)","<p>Return a YANG schema for the indicated schema on the indicated node.\n<p><em>Parameters</em>\n<p><p>node_name &mdash; String : name …\n"],["get_schema","VRouter5600","VRouter5600.html#method-i-get_schema","(id: nil, version: nil)","<p>Return a YANG schema for the indicated schema on the VRouter5600.\n<p><em>Parameters</em>\n<p><p>id &mdash; String : Identifier for …\n"],["get_schemas","Controller","Controller.html#method-i-get_schemas","(node_name)","<p>Return a list of YANG schemas for the node.\n<p><em>Parameters</em>\n<p><p>node_name &mdash; String : name of the node from the #get_all_nodes_in_config …\n"],["get_schemas","VRouter5600","VRouter5600.html#method-i-get_schemas","()","<p>Return a list of YANG schemas for this VRouter5600.\n<p><em>Return</em> <em>Value</em>\n<p>NetconfResponse :  Status ( NetconfResponseStatus …\n"],["get_service_provider_info","Controller","Controller.html#method-i-get_service_provider_info","(provider_name)","<p>Return info about a single service provider.\n<p><em>Parameters</em>\n<p><p>provider_name &mdash; name of the service provider from …\n"],["get_service_providers_info","Controller","Controller.html#method-i-get_service_providers_info","()","<p>Return a list of service providers available.\n<p><em>Return</em> <em>Value</em>\n<p>NetconfResponse :  Status ( NetconfResponseStatus …\n"],["get_sessions_info","Controller","Controller.html#method-i-get_sessions_info","(node_name)","<p>Return sessions for indicated node.\n<p><em>Parameters</em>\n<p><p>node_name &mdash; String : name of the node from the #get_all_nodes_in_config …\n"],["get_streams_info","Controller","Controller.html#method-i-get_streams_info","()","<p>Return streams available for subscription.\n<p><em>Return</em> <em>Value</em>\n<p>NetconfResponse :  Status ( NetconfResponseStatus …\n"],["get_switch_info","OFSwitch","OFSwitch.html#method-i-get_switch_info","()","<p>Return info about the OpenFlow switch.\n<p><em>Return</em> <em>Value</em>\n<p>NetconfResponse :  Status ( NetconfResponseStatus ) …\n"],["get_uri","DataplaneFirewall","DataplaneFirewall.html#method-i-get_uri","()",""],["message","NetconfResponse","NetconfResponse.html#method-i-message","()","<p>Return a string for the status.\n<p><em>Return</em> <em>Value</em>\n<p>string :  A string describing the status of the response (success …\n"],["new","Action","Action.html#method-c-new","(order: nil)",""],["new","ActionOutput","ActionOutput.html#method-c-new","(port: nil, length: nil, order: nil)","<p><em>Parameters</em>\n<p><p>port &mdash; integer : the port to target for output\n\n<p><p>length &mdash; integer : When the ’port’ is the controller, …\n"],["new","Controller","Controller.html#method-c-new","(ip_addr: nil, port_number: 8181, admin_name: nil, admin_password: nil, timeout_in_s: 5)","<p><em>Parameters</em>\n<p><p>ip_addr &mdash; String : IP address of the BVC.  e.g. 192.168.56.101\n\n<p><p>port_number &mdash; String : Port number …\n"],["new","CopyTTLInwardsAction","CopyTTLInwardsAction.html#method-c-new","(order: 0)","<p><em>Parameters</em>\n<p><p>order &mdash; integer : The order of the action relative to other actions in Instruction.\n\n\n"],["new","CopyTTLOutwardsAction","CopyTTLOutwardsAction.html#method-c-new","(order: 0)","<p><em>Parameters</em>\n<p><p>order &mdash; integer : The order of the action relative to other actions in Instruction.\n\n\n"],["new","DataplaneFirewall","DataplaneFirewall.html#method-c-new","(interface_name: nil, in_firewall_name: nil, out_firewall_name: nil)",""],["new","DecMplsTTLAction","DecMplsTTLAction.html#method-c-new","(order: 0)","<p><em>Parameters</em>\n<p><p>order &mdash; integer : The order of the action relative to other actions in Instruction.\n\n\n"],["new","DecNwTTLAction","DecNwTTLAction.html#method-c-new","(order: 0)","<p><em>Parameters</em>\n<p><p>order &mdash; integer : The order of the action relative to other actions in Instruction.\n\n\n"],["new","Firewall","Firewall.html#method-c-new","(rules: nil)","<p><em>Parameters</em>\n<p><p>rules &mdash; Rules : rules defining behavior of firewall.\n\n\n"],["new","FloodAction","FloodAction.html#method-c-new","(order: 0)","<p><em>Parameters</em>\n<p><p>order &mdash; integer : The order of the action relative to other actions in Instruction.\n\n\n"],["new","FloodAllAction","FloodAllAction.html#method-c-new","(order: 0)","<p><em>Parameters</em>\n<p><p>order &mdash; integer : The order of the action relative to other actions in Instruction.\n\n\n"],["new","FlowEntry","FlowEntry.html#method-c-new","(flow_table_id: 0, flow_id: nil, flow_priority: nil, name: nil, idle_timeout: 0, hard_timeout: 0, strict: false, install_hw: false, barrier: false, cookie: nil, cookie_mask: nil, out_port: nil, out_group: nil, flags: nil, buffer_id: nil)","<p><em>Parameters</em>\n<p><p>flow_table_id &mdash; string: ID of the table to put the flow in\n\n<p><p>flow_id &mdash; integer: Unique identifier …\n"],["new","GroupAction","GroupAction.html#method-c-new","(order: nil, group: nil, group_id: nil)","<p><em>Parameters</em>\n<p><p>order &mdash; integer : The order of the action relative to other actions in Instruction.\n\n<p><p>group &mdash; \n<p><p>group_id … &mdash; "],["new","HwPathAction","HwPathAction.html#method-c-new","(order: 0)","<p><em>Parameters</em>\n<p><p>order &mdash; integer : The order of the action relative to other actions in Instruction.\n\n\n"],["new","Instruction","Instruction.html#method-c-new","(instruction_order: nil)","<p><em>Parameters</em>\n<p><p>instruction_order &mdash; Order in which to carry out this instruction relative to other\ninstructions. …\n\n\n"],["new","LoopbackAction","LoopbackAction.html#method-c-new","(order: 0)","<p><em>Parameters</em>\n<p><p>order &mdash; integer : The order of the action relative to other actions in Instruction.\n\n\n"],["new","Match","Match.html#method-c-new","(eth_type: nil, ipv4_destination: nil, ipv4_source: nil, ipv6_source: nil, ipv6_destination: nil, ipv6_flabel: nil, ipv6_ext_header: nil, ethernet_destination: nil, ethernet_source: nil, in_port: nil, in_physical_port: nil, ip_protocol_num: nil, ip_dscp: nil, ip_ecn: nil, tcp_source_port: nil, tcp_destination_port: nil, udp_source_port: nil, udp_destination_port: nil, icmpv4_type: nil, icmpv4_code: nil, icmpv6_type: nil, icmpv6_code: nil, arp_op_code: nil, arp_source_ipv4: nil, arp_target_ipv4: nil, arp_source_hardware_address: nil, arp_target_hardware_address: nil, vlan_id: nil, vlan_pcp: nil, sctp_destination: nil, sctp_source: nil, mpls_label: nil, mpls_tc: nil, mpls_bos: nil, tunnel_id: nil, metadata: nil, metadata_mask: nil)","<p><em>Parameters</em>\n<p><p>eth_type &mdash; integer : Ethernet type\n\n<p><p>ipv4_destination &mdash; string : IPv4 Destination IP address\n"],["new","NetconfNode","NetconfNode.html#method-c-new","(controller: nil, name: nil, ip_addr: nil, port_number: nil, admin_name: nil, admin_password: nil, tcp_only: false)","<p><em>Parameters</em>\n<p><p>controller &mdash; Controller : The controller object through which NETCONF device is to be\naccessed. …\n\n"],["new","Node","Node.html#method-c-new","(controller: nil, name: nil)","<p><em>Parameters</em>\n<p><p>controller &mdash; Controller : The controller object through which node is to be accessed.\n\n<p><p>name &mdash; String …\n"],["new","OFSwitch","OFSwitch.html#method-c-new","(controller: nil, name: nil, dpid: nil)","<p><em>Parameters</em>\n<p><p>controller &mdash; Controller : Controller object through which the OpenFlow switch is to be\ncontrolled. …\n\n"],["new","OutputAction","OutputAction.html#method-c-new","(order: 0, port: nil, max_length: nil)","<p><em>Parameters</em>\n<p><p>order &mdash; integer : The order of the action relative to other actions in Instruction.\n\n<p><p>port &mdash; integer …\n"],["new","PopMplsHeaderAction","PopMplsHeaderAction.html#method-c-new","(order: 0, eth_type: nil)","<p><em>Parameters</em>\n<p><p>order &mdash; integer : The order of the action relative to other actions in Instruction.\n\n<p><p>eth_type … &mdash; "],["new","PopPBBHeaderAction","PopPBBHeaderAction.html#method-c-new","(order: 0)","<p><em>Parameters</em>\n<p><p>order &mdash; integer : The order of the action relative to other actions in Instruction.\n\n\n"],["new","PopVlanHeaderAction","PopVlanHeaderAction.html#method-c-new","(order: 0)","<p><em>Parameters</em>\n<p><p>order &mdash; integer : The order of the action relative to other actions in Instruction.\n\n\n"],["new","PushMplsHeaderAction","PushMplsHeaderAction.html#method-c-new","(order: 0, eth_type: nil)","<p><em>Parameters</em>\n<p><p>order &mdash; integer : The order of the action relative to other actions in Instruction.\n\n<p><p>eth_type … &mdash; "],["new","PushPBBHeaderAction","PushPBBHeaderAction.html#method-c-new","(order: 0, eth_type: nil)","<p><em>Parameters</em>\n<p><p>order &mdash; integer : The order of the action relative to other actions in Instruction.\n\n<p><p>eth_type … &mdash; "],["new","PushVlanHeaderAction","PushVlanHeaderAction.html#method-c-new","(order: 0, eth_type: nil, tag: nil, pcp: nil, cfi: nil, vlan_id: nil)","<p><em>Parameters</em>\n<p><p>order &mdash; integer : The order of the action relative to other actions in Instruction.\n\n<p><p>eth_type … &mdash; "],["new","Rule","Rule.html#method-c-new","(rule_number: nil, action: nil, source_address: nil, icmp_typename: nil)","<p><em>Parameters</em>\n<p><p>rule_number &mdash; Integer: The rule number.  e.g. 40\n\n<p><p>action &mdash; String: The action for the rule.  e.g. …\n"],["new","Rules","Rules.html#method-c-new","(name: nil)","<p><em>Parameters</em>\n<p><p>name &mdash; String: Name of the firewall rule.\n\n\n"],["new","SetDlDstAction","SetDlDstAction.html#method-c-new","(order: nil, mac_addr: nil)","<p><em>Parameters</em>\n<p><p>order &mdash; integer : The order of the action relative to other actions in Instruction.\n\n<p><p>mac_addr … &mdash; "],["new","SetDlSrcAction","SetDlSrcAction.html#method-c-new","(order: nil, mac_addr: nil)","<p><em>Parameters</em>\n<p><p>order &mdash; integer : The order of the action relative to other actions in Instruction.\n\n<p><p>mac_addr … &mdash; "],["new","SetFieldAction","SetFieldAction.html#method-c-new","(order: 0, vlan_id: nil, mpls_label: nil)","<p><em>Parameters</em>\n<p><p>order &mdash; integer : The order of the action relative to other actions in Instruction.\n\n<p><p>vlan_id &mdash; "],["new","SetMplsTTLAction","SetMplsTTLAction.html#method-c-new","(order: 0, mpls_ttl: nil)","<p><em>Parameters</em>\n<p><p>order &mdash; integer : The order of the action relative to other actions in Instruction.\n\n<p><p>mpls_ttl … &mdash; "],["new","SetNwDstAction","SetNwDstAction.html#method-c-new","(order: nil, ip_addr: nil)","<p><em>Parameters</em>\n<p><p>order &mdash; integer : The order of the action relative to other actions in Instruction.\n\n<p><p>ip_addr &mdash; "],["new","SetNwSrcAction","SetNwSrcAction.html#method-c-new","(order: nil, ip_addr: nil)","<p><em>Parameters</em>\n<p><p>order &mdash; integer : The order of the action relative to other actions in Instruction.\n\n<p><p>ip_addr &mdash; "],["new","SetNwTTLAction","SetNwTTLAction.html#method-c-new","(order: 0, ip_ttl: nil)","<p><em>Parameters</em>\n<p><p>order &mdash; integer : The order of the action relative to other actions in Instruction.\n\n<p><p>ip_ttl &mdash; integer …\n"],["new","SetQueueAction","SetQueueAction.html#method-c-new","(order: nil, queue: nil, queue_id: nil)","<p><em>Parameters</em>\n<p><p>order &mdash; integer : The order of the action relative to other actions in Instruction.\n\n<p><p>queue &mdash; \n<p><p>queue_id … &mdash; "],["new","SetTpDstAction","SetTpDstAction.html#method-c-new","(order: nil, port: nil)","<p><em>Parameters</em>\n<p><p>order &mdash; integer : The order of the action relative to other actions in Instruction.\n\n<p><p>port &mdash; integer …\n"],["new","SetTpSrcAction","SetTpSrcAction.html#method-c-new","(order: nil, port: nil)","<p><em>Parameters</em>\n<p><p>order &mdash; integer : The order of the action relative to other actions in Instruction.\n\n<p><p>port &mdash; integer …\n"],["new","SetVlanCfiAction","SetVlanCfiAction.html#method-c-new","(order: nil, vlan_cfi: nil)","<p><em>Parameters</em>\n<p><p>order &mdash; integer : The order of the action relative to other actions in Instruction.\n\n<p><p>vlan_cfi … &mdash; "],["new","SetVlanIdAction","SetVlanIdAction.html#method-c-new","(order: nil, vlan_id: nil)","<p><em>Parameters</em>\n<p><p>order &mdash; integer : The order of the action relative to other actions in Instruction.\n\n<p><p>vlan_id &mdash; "],["new","SetVlanPCPAction","SetVlanPCPAction.html#method-c-new","(order: nil, vlan_pcp: nil)","<p><em>Parameters</em>\n<p><p>order &mdash; integer : The order of the action relative to other actions in Instruction.\n\n<p><p>vlan_pcp … &mdash; "],["new","SwPathAction","SwPathAction.html#method-c-new","(order: 0)","<p><em>Parameters</em>\n<p><p>order &mdash; integer : The order of the action relative to other actions in Instruction.\n\n\n"],["set_dataplane_interface_firewall","VRouter5600","VRouter5600.html#method-i-set_dataplane_interface_firewall","(interface_name, inbound_firewall_name: nil, outbound_firewall_name: nil)","<p>Set a firewall for inbound, outbound or both for a dataplane interface on\nthe VRouter 5600.\n<p><em>Parameters</em> …\n"],["to_hash","CopyTTLInwardsAction","CopyTTLInwardsAction.html#method-i-to_hash","()",""],["to_hash","CopyTTLOutwardsAction","CopyTTLOutwardsAction.html#method-i-to_hash","()",""],["to_hash","DataplaneFirewall","DataplaneFirewall.html#method-i-to_hash","()",""],["to_hash","DecMplsTTLAction","DecMplsTTLAction.html#method-i-to_hash","()",""],["to_hash","DecNwTTLAction","DecNwTTLAction.html#method-i-to_hash","()",""],["to_hash","DropAction","DropAction.html#method-i-to_hash","()",""],["to_hash","FloodAction","FloodAction.html#method-i-to_hash","()",""],["to_hash","FloodAllAction","FloodAllAction.html#method-i-to_hash","()",""],["to_hash","HwPathAction","HwPathAction.html#method-i-to_hash","()",""],["to_s","ActionOutput","ActionOutput.html#method-i-to_s","()",""],["update","ActionOutput","ActionOutput.html#method-i-update","(port: nil, length: nil, order: nil)","<p>Return a list of YANG schemas for the node.\n<p><em>Parameters</em>\n<p><p>port &mdash; integer : the port to target for output\n"],["update_from_object","ActionOutput","ActionOutput.html#method-i-update_from_object","(action_object)","<p>Update from an existing Action .\n<p><em>Parameters</em>\n<p><p>action_object &mdash; Action : Update this action from an existing …\n"],["Gemfile","","Gemfile.html","","<p># A sample Gemfile source “rubygems.org”\n<p>ruby &#39;2.0.0&#39;\n<p>gem &#39;nokogiri&#39;\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>GEM\n\n<pre>remote: https://rubygems.org/\nspecs:\n  addressable (2.3.8)\n  crack (0.4.2)\n    safe_yaml (~&gt; 1.0.0) ...</pre>\n"],["LICENSE","","LICENSE.html","","<p>Copyright © 2015, Brocade Communications Systems, Inc. All rights reserved.\n<p>Redistribution and use in …\n"],["contributors","","contributors_txt.html","","<p>sarah_dempsey\n"],["dodoc","","dodoc.html","","<p>rm -r doc rdoc\n"],["howToReleaseNewVersion","","howToReleaseNewVersion_txt.html","","<p>When you are ready to release a new version of pybvc then follow these\nsteps.\n<p>UPDATE VERSION:\n<p>In master …\n"],["howToUpdateDocs","","howToUpdateDocs_txt.html","","<p>The documentation for bvcruby is autogenerated and hosted on Github.  This\ndocument describes how to …\n"],["publishdoc","","publishdoc.html","","<p>branch=$(git branch | sed -n -e &#39;s/^* (.*)/1/p&#39;) DIRECTORY=“doc”\necho $branch if …\n"],["rubybvc.gemspec","","rubybvc_gemspec.html","","<p>Gem::Specification.new do |s|\n\n<pre>s.name        = &#39;rubybvc&#39;\ns.version     = &#39;0.3.1&#39;\ns.date        = &#39;2015-04-10&#39; ...</pre>\n"]]}}